[{"path":"https://sydney-informatics-hub.github.io/dataharvester/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://sydney-informatics-hub.github.io/dataharvester/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://sydney-informatics-hub.github.io/dataharvester/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Januar Harianto. Author, maintainer, translator. Sebastian Haan. Author. Nathaniel Butterworth. Author.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Harianto J, Haan S, Butterworth N (2022). dataharvester: R interface AgReFed Data-Harvester. R package version 0.0.1, https://sydney-informatics-hub.github.io/dataharvester/.","code":"@Manual{,   title = {dataharvester: R interface to the AgReFed Data-Harvester},   author = {Januar Harianto and Sebastian Haan and Nathaniel Butterworth},   year = {2022},   note = {R package version 0.0.1},   url = {https://sydney-informatics-hub.github.io/dataharvester/}, }"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R interface to the AgReFed Data-Harvester","text":"Important: dataharvester currently still early development. download package unless developer love break things. Install development version package GitHub using install_github() remotes devtools:","code":"# install.packages(\"remotes\") # uncomment and run this line if necessary remotes::install_github(\"januarharianto/dataharvester\")  library(dataharvester) # load package"},{"path":[]},{"path":"https://sydney-informatics-hub.github.io/dataharvester/index.html","id":"headless-run","dir":"","previous_headings":"Examples","what":"“Headless” run","title":"R interface to the AgReFed Data-Harvester","text":"Run initialise_harvester() loading package. function helps initialise package, verifies package dependencies connect Earth Engine API. , run harvest(), parses YAML config file:","code":"library(dataharvester) initialise_harvester(earthengine = TRUE) harvest(\"path/to/config.yaml\")"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/index.html","id":"manual-downloads","dir":"","previous_headings":"Examples","what":"Manual downloads","title":"R interface to the AgReFed Data-Harvester","text":"","code":"# TODO"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"R interface to the AgReFed Data-Harvester","text":"Acknowledgements important way us demonstrate value bring research. research outcomes vital ongoing funding Sydney Informatics Hub. make use software research project, please include following acknowledgement: “research supported Sydney Informatics Hub, Core Research Facility University Sydney, Agricultural Research Federation (AgReFed).”","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/index.html","id":"attribution","dir":"","previous_headings":"","what":"R interface to the AgReFed Data-Harvester","title":"R interface to the AgReFed Data-Harvester","text":"software developed Sydney Informatics Hub, core research facility University Sydney, part Data Harvesting project Agricultural Research Federation (AgReFed). AgReFed supported Australian Research Data Commons (ARDC) Australian Government National Collaborative Research Infrastructure Strategy (NCRIS). also like acknowledge use following Python packages dataharvester: geemap wxee eemont","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"R interface to the AgReFed Data-Harvester","text":"Copyright 2022 University Sydney free software: can redistribute /modify terms GNU Lesser General Public License (LGPL version 3) published Free Software Foundation.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/Llara.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data Llara — Llara","title":"Example data Llara — Llara","text":"dataset.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/Llara.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data Llara — Llara","text":"","code":"Llara"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/Llara.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data Llara — Llara","text":"dataset containing x y coordinates. Lat latitude Long longitude Easting easting Northing northing Depth depth range, cm","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/aggregate_ee.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate an Earth Engine Image Collection by period — aggregate_ee","title":"Aggregate an Earth Engine Image Collection by period — aggregate_ee","text":"Performs simple temporal aggregation Earth Engine Image collections month year. example, can calculate maximum normalized difference vegetation index (NDVI) area interest year. Note processing times can increase substantially increased number images.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/aggregate_ee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate an Earth Engine Image Collection by period — aggregate_ee","text":"","code":"aggregate_ee(object, frequency = \"month\", reduce_by = NULL)"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/aggregate_ee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate an Earth Engine Image Collection by period — aggregate_ee","text":"object object: data object produced collect_e() frequency str, optional: either \"month\" \"year\" accepted reduce_by str, optional: summary statistic technique perform aggregated data. NULL (default), calculate mean per period","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/aggregate_ee.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate an Earth Engine Image Collection by period — aggregate_ee","text":"updated collect_ee() object can passed map_ee() download_ee()","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/aggregate_ee.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate an Earth Engine Image Collection by period — aggregate_ee","text":"","code":"img <- collect_ee(   collection = \"LANDSAT/LC09/C02/T1_L2\",   coords = c(149.769345, -30.335861, 149.949173, -30.206271),   date = \"2021-06-01\",   end_date = \"2022-06-01\" ) #> Error: Error loading Python module getdata_ee  preprocess_ee(img, spectral = \"NDVI\") #> Error in preprocess_ee(img, spectral = \"NDVI\"): object 'img' not found # aggregate_ee(img, reduce_by = \"median\")"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/authenticate_ee.html","id":null,"dir":"Reference","previous_headings":"","what":"Authenticate to Google Earth Engine API — authenticate_ee","title":"Authenticate to Google Earth Engine API — authenticate_ee","text":"Utilises google-cloud-sdk initialise authenticate Earth Engine API. API token containing user's credentials saved locally can used authenticate vial Application Default Credentials.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/authenticate_ee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authenticate to Google Earth Engine API — authenticate_ee","text":"","code":"authenticate_ee()"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/collect_ee.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Google Earth Engine data to collect — collect_ee","title":"Define Google Earth Engine data to collect — collect_ee","text":"Define Google Earth Engine data collect","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/collect_ee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Google Earth Engine data to collect — collect_ee","text":"","code":"collect_ee(   collection = NULL,   coords = NULL,   date = NULL,   end_date = NULL,   buffer = NULL,   bound = FALSE,   config = NULL )"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/collect_ee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Google Earth Engine data to collect — collect_ee","text":"collection string: name Google Earth Engine collection. Collections can found Google Earth Engine Catalog coords numeric: GPS coordinates WGS84 [East, North]. Minimum one set coordinates provided create point coordinate. one set coordinates provided, polygon created date string: Start date image(s) collected YYYY-MM-DD YYYY format. YYY-MM-DD provided, search specific date (may contain image), unless end_date also provided, collect images two dates. YYYY provided, images within specified year included collection end_date string, optional:  paired date argument, can define date range YYYY-MM-DD YYYY format buffer integer, optional: coords single point, buffer can used create circular buffer specific radius metres. coords contains one set coordinates, argument nothing bound logical, optional: buffer contains integer value, agrument convert circular buffer bounding box instead. Defaults FALSE config string, optional: Path configuration file .yaml format. provided, arguments ignored function refer configuration file determine argument values","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/collect_ee.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Google Earth Engine data to collect — collect_ee","text":"object containing attributes necessary preprocess download images *_ee() functions","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/collect_ee.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define Google Earth Engine data to collect — collect_ee","text":"","code":"NULL #> NULL  collect_ee(   collection = \"LANDSAT/LC09/C02/T1_L2\",   coords = c(149.769345, -30.335861, 149.949173, -30.206271),   date = \"2021-06-01\",   end_date = \"2022-06-01\" ) #> Error in py_module_import(module, convert = convert): ModuleNotFoundError: No module named 'dateutil'"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_bbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify bounding box limits as a vector — config_bbox","title":"Specify bounding box limits as a vector — config_bbox","text":"Define bounding box data collected. Normally rectangular, since simple/useful plotting.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_bbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify bounding box limits as a vector — config_bbox","text":"","code":"config_bbox(x, boundaries = NULL)"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_bbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify bounding box limits as a vector — config_bbox","text":"x harvester must object class, can created using load_config() boundaries num vector 4 numerical values representing left, bottom, right top coordinates.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_bbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify bounding box limits as a vector — config_bbox","text":"list object stores configuration options data harvester.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_bbox.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify bounding box limits as a vector — config_bbox","text":"EPSG:4326 bounding box defined (long_left, lat_bottom, long_right, lat_top). projected coordinate reference system used, bounding box defined : (easting_left, northing_bottom, easting_right, northing_top) NULL, bounding box set default min/max point data +/- 0.05 deg (180 arcsec). arcsec). Also note invalid vector provided .e. containing 4 values, default bounding box apply.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_crs.html","id":null,"dir":"Reference","previous_headings":"","what":"Define coordinate reference system — config_crs","title":"Define coordinate reference system — config_crs","text":"Define coordinate reference system","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_crs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define coordinate reference system — config_crs","text":"","code":"config_crs(x, target_crs = \"EPSG:4326\")"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_crs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define coordinate reference system — config_crs","text":"x harvester must object class, can created using load_config() target_crs chr coordinate reference system (CRS) e.g. \"EPSG:4326\"","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_crs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define coordinate reference system — config_crs","text":"list object stores configuration options data harvester.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Define download date and times, and summary interval — config_dates","title":"Define download date and times, and summary interval — config_dates","text":"Define download date times, summary interval","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define download date and times, and summary interval — config_dates","text":"","code":"config_dates(x, dates = NULL, interval = \"year\")"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define download date and times, and summary interval — config_dates","text":"x harvester must object class, can created using load_config() dates num numeric value vector year values, e.g. 2019 interval chr define interval data summary. Use \"year\", \"month\" \"day\"","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define download date and times, and summary interval — config_dates","text":"list object stores configuration options data harvester.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_dea.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure DEA resource download settings — config_dea","title":"Configure DEA resource download settings — config_dea","text":"Configure DEA resource download settings","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_dea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure DEA resource download settings — config_dea","text":"","code":"config_dea(x, layers = NULL, summaries = NULL)"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_dea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure DEA resource download settings — config_dea","text":"x harvester must object class, can created using load_config() layers chr name layer. specific SLGA list layers can downloaded. summaries chr layer specified, summary needs paired . one summary value provided, function assume layers","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_dea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure DEA resource download settings — config_dea","text":"list object stores configuration options data harvester.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_dem.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure DEM resource download settings — config_dem","title":"Configure DEM resource download settings — config_dem","text":"Configure DEM resource download settings","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_dem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure DEM resource download settings — config_dem","text":"","code":"config_dem(x, layers = NULL, summaries = NULL)"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_dem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure DEM resource download settings — config_dem","text":"x harvester must object class, can created using load_config() layers chr name layer. specific SLGA list layers can downloaded. summaries chr layer specified, summary needs paired . one summary value provided, function assume layers","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_dem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure DEM resource download settings — config_dem","text":"list object stores configuration options data harvester.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure paths to input and output folders and files — config_paths","title":"Configure paths to input and output folders and files — config_paths","text":"function changes values 'inpath', 'outpath' 'infname' data harvester configuration.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure paths to input and output folders and files — config_paths","text":"","code":"config_paths(x, input = NULL, output = NULL, in_file = NULL)"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure paths to input and output folders and files — config_paths","text":"x Data object class harvester, created load_config(). function accept data object processed way. input Path folder containing input files used determine coordinates features download. NULL, update existing value. output Path folder save results. Images, data frames geospatial data outputs saved folder easy access. NULL, update existing value. in_file Path specific file used determine coordinates features download. NULL, update existing value.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure paths to input and output folders and files — config_paths","text":"list object stores configuration options data harvester.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_res.html","id":null,"dir":"Reference","previous_headings":"","what":"Define resolution in arcsecs — config_res","title":"Define resolution in arcsecs — config_res","text":"Define resolution arcsecs","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_res.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define resolution in arcsecs — config_res","text":"","code":"config_res(x, value = NULL)"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_res.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define resolution in arcsecs — config_res","text":"x harvester must object class, can created using load_config() value num resolution arcsecs","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_res.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define resolution in arcsecs — config_res","text":"list object stores configuration options data harvester.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_silo.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure SILO resource download settings — config_silo","title":"Configure SILO resource download settings — config_silo","text":"Configure SILO resource download settings","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_silo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure SILO resource download settings — config_silo","text":"","code":"config_silo(x, layers = NULL, summaries = NULL)"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_silo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure SILO resource download settings — config_silo","text":"x harvester must object class, can created using load_config() layers chr name layer. specific SLGA list layers can downloaded. summaries chr layer specified, summary needs paired . one summary value provided, function assume layers","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_silo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure SILO resource download settings — config_silo","text":"list object stores configuration options data harvester.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_slga.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure SLGA resource download settings — config_slga","title":"Configure SLGA resource download settings — config_slga","text":"Configure SLGA resource download settings","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_slga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure SLGA resource download settings — config_slga","text":"","code":"config_slga(x, layers = NULL, summaries = \"mean\")"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_slga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure SLGA resource download settings — config_slga","text":"x harvester must object class, can created using load_config() layers chr name layer. specific SLGA list layers can downloaded. summaries chr layer specified, summary needs paired . one summary value provided, function assume layers","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_slga.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure SLGA resource download settings — config_slga","text":"list object stores configuration options data harvester.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_xy_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify the column names of x and y variables in data file — config_xy_names","title":"Specify the column names of x and y variables in data file — config_xy_names","text":"data harvester work, needs coordinate data. Different users call x y coordinates different names data file e.g. \"Lon\", \"Long\", \"x\", \"Easting\" \"East\".","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_xy_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify the column names of x and y variables in data file — config_xy_names","text":"","code":"config_xy_names(x, xvar = NULL, yvar = NULL)"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_xy_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify the column names of x and y variables in data file — config_xy_names","text":"x harvester must object class, can created using load_config(). xvar chr column name x coordinate stored input data file, replace value colname_lng. yvar chr column name y coordinate stored input data file, replace value colname_lat.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_xy_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify the column names of x and y variables in data file — config_xy_names","text":"list object stores configuration options data harvester.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/config_xy_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify the column names of x and y variables in data file — config_xy_names","text":"Changing  allows data harvester identify x y coordinates appropriately user's help. values saved options colname_lng colname_lat data harvester configuration.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/download_dem.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Geoscience Australia DEM grid data — download_dem","title":"Download Geoscience Australia DEM grid data — download_dem","text":"Wrapper funtion get layers Geoscience Australia DEM 1 arc second grid.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/download_dem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Geoscience Australia DEM grid data — download_dem","text":"","code":"download_dem(layer, out_path, bounding_box, zresolution = 1)"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/download_dem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Geoscience Australia DEM grid data — download_dem","text":"layer string: layer name(s) download out_path string: path output folder e.g. 'downloads/' bounding_box numeric: resolution integer, optional:","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/download_dem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Geoscience Australia DEM grid data — download_dem","text":"list output filenames","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/download_dem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Geoscience Australia DEM grid data — download_dem","text":"","code":"NULL #> NULL"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/download_ee.html","id":null,"dir":"Reference","previous_headings":"","what":"Download an Earth Engine Image or Image Collection — download_ee","title":"Download an Earth Engine Image or Image Collection — download_ee","text":"Images saved GeoTIFF (.tif) files containing geospatial data, unless otherwise specified out_format.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/download_ee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download an Earth Engine Image or Image Collection — download_ee","text":"","code":"download_ee(   object,   bands = NULL,   scale = NULL,   out_path = NULL,   out_format = NULL,   overwrite = TRUE )"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/download_ee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download an Earth Engine Image or Image Collection — download_ee","text":"object object: data object produced collect_e() bands string: string list strings representing bands downloaded scale numeric, optional: number represeting scale pixel metres. set NULL, use scale 100 m. Defaults NULL out_path string, optional: string representing path output directory. set NULL, use current working directory add \"downloads/\" folder. Defaults NULL out_format string, optional: Save image GeoTIFF (.tif), JPEG (.jpg) PNG (.png). Defaults .tif overwrite logical, optional: overwrite existing file already exists. Defaults NULL","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/download_ee.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download an Earth Engine Image or Image Collection — download_ee","text":"","code":"NULL #> NULL"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/download_silo.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Australian climate data from SILO — download_silo","title":"Download Australian climate data from SILO — download_silo","text":"Download Australian climate data SILO","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/download_silo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Australian climate data from SILO — download_silo","text":"","code":"download_silo(   layername,   years,   out_path,   bounding_box = NULL,   format_out = \"nc\",   delete_temp = FALSE,   verbose = FALSE )"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/download_silo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Australian climate data from SILO — download_silo","text":"layername NULL years NULL format_out NULL delete_temp NULL verbose NULL outpath NULL bbox NULL","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/download_silo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Australian climate data from SILO — download_silo","text":"","code":"NULL #> NULL"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/download_slga.html","id":null,"dir":"Reference","previous_headings":"","what":"Download layers from SLGA data server — download_slga","title":"Download layers from SLGA data server — download_slga","text":"Download layers SLGA data server","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/download_slga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download layers from SLGA data server — download_slga","text":"","code":"download_slga(   layer,   bounding_box,   out_path,   resolution = 3,   depth_min = 0,   depth_max = 200,   get_ci = TRUE,   verbose = FALSE )"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/download_slga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download layers from SLGA data server — download_slga","text":"layer string: layer name(s) download bounding_box numeric: coordinates EPSG:4326 use generate bounding box around interest, .e. c(min_x, min_y, max_x, max_y) out_path string: path output folder e.g. 'downloads/' resolution numeric, optional: resolution arcsec. Defaults 3 arcsec (~ 90 m), native resolution SLGA data depth_min integer, optional: SLGA layers aggregated depth. Use depth_min depth_max define specific depths collect depth_max integer, optional: SLGA layers aggregated depth. Use depth_min depth_max define specific depths collect get_ci logical, optional: download upper lower 95% confidence limits layer. Defaults TRUE verbose logical, optional: print much information possible debug log. Defaults FALSE","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/download_slga.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download layers from SLGA data server — download_slga","text":"path name(s) layer(s) downloaded","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/download_slga.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download layers from SLGA data server — download_slga","text":"","code":"NULL #> NULL"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/get_dea.html","id":null,"dir":"Reference","previous_headings":"","what":"Get DEA — get_dea","title":"Get DEA — get_dea","text":"Get DEA","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/get_dea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get DEA — get_dea","text":"","code":"get_dea(x, config = NULL, agg = c(\"mean\", \"perc95\", \"perc5\"), ...)"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/get_dea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get DEA — get_dea","text":"...","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/get_slga.html","id":null,"dir":"Reference","previous_headings":"","what":"Download from SLGA — get_slga","title":"Download from SLGA — get_slga","text":"Download data producst SLGA.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/get_slga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download from SLGA — get_slga","text":"","code":"get_slga(x, config = NULL, ...)"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/get_slga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download from SLGA — get_slga","text":"x data.frame, agrefed.wrap data frame object provided, requires \"config\" pointed config file created load_config() file path leading config .yaml file. config chr defaults NULL. Can either object class harvester created load_config() path .yaml config file. ... arguments passed function","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/get_slga.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download from SLGA — get_slga","text":"list object class \"agrefed.wrap\" containing original data frame, copy config log.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/harvest.html","id":null,"dir":"Reference","previous_headings":"","what":"A headless version of the Data-Harvester (with some limitations) — harvest","title":"A headless version of the Data-Harvester (with some limitations) — harvest","text":"harvest() function requires YAML configuration file work perform data aggregation, downloading logging based parsed YAML file. information 'headless' functionality, see documentation online (site live yet). YAML template can generated using function create_yaml()","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/harvest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A headless version of the Data-Harvester (with some limitations) — harvest","text":"","code":"harvest(path_to_config, preview = FALSE)"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/harvest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A headless version of the Data-Harvester (with some limitations) — harvest","text":"path_to_config string: path YAML config file, e.g. \"settings/\" preview logical: preview","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/init_logtable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dataframe to store raster download and processing information — init_logtable","title":"Create a dataframe to store raster download and processing information — init_logtable","text":"functions arguments. dataframe can updated update_logtable() function.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/init_logtable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dataframe to store raster download and processing information — init_logtable","text":"","code":"init_logtable()"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/init_logtable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dataframe to store raster download and processing information — init_logtable","text":"data frame object","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/initialise_harvester.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialise and validate Data-Harvester, including dependencies — initialise_harvester","title":"Initialise and validate Data-Harvester, including dependencies — initialise_harvester","text":"Initialise validate Data-Harvester, including dependencies","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/initialise_harvester.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialise and validate Data-Harvester, including dependencies — initialise_harvester","text":"","code":"initialise_harvester(earthengine = TRUE)"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/initialise_harvester.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialise and validate Data-Harvester, including dependencies — initialise_harvester","text":"earthengine logical initialise Earth Engine TRUE. Defaults FALSE","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/load_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a configuration file for data harvester — load_config","title":"Load a configuration file for data harvester — load_config","text":"function performs sequence checks read .yaml configuration file data harvester.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/load_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a configuration file for data harvester — load_config","text":"","code":"load_config(x = NULL, choose = 1)"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/load_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a configuration file for data harvester — load_config","text":"x Name config file (.extenson), path \".yaml\" config file. NULL, loads default config file normally used demonstrate use data harvester. default configuration can also used template. choose one file name found, argument can used select desired file position. Defaults first file listed.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/load_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a configuration file for data harvester — load_config","text":"list object stores configuration options data harvester.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/load_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load a configuration file for data harvester — load_config","text":"First, file name file path provided, load template configuration. config name provided (without paths extension), search folders relative working folder file name, including common folders \"data\" \"config\". multiple files found, user can choose right file load specifying using argument choose. file path provided, load file path.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/load_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a configuration file for data harvester — load_config","text":"","code":"load_config() # loads template config as a start #> ✓ | Default config loaded"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/load_settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Load settings from YAML file — load_settings","title":"Load settings from YAML file — load_settings","text":"Load settings YAML file","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/load_settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load settings from YAML file — load_settings","text":"","code":"load_settings(path_to_yaml, to_namespace = TRUE)"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/load_settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load settings from YAML file — load_settings","text":"path","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/map_ee.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise an Earth Engine Image or Image Collection on an interactive map — map_ee","title":"Visualise an Earth Engine Image or Image Collection on an interactive map — map_ee","text":"folium map produced image(s) collected far displayed layer(s) top map.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/map_ee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise an Earth Engine Image or Image Collection on an interactive map — map_ee","text":"","code":"map_ee(object, bands = NULL, minmax = NULL, palette = NULL)"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/map_ee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise an Earth Engine Image or Image Collection on an interactive map — map_ee","text":"object object: data object produced collect_e() bands string, optional: string list strings representing bands visualised. NULL, present list available bands visualise minmax numeric, optional: list two integers representing minimum maximum values image pixel colours single-band images. set NULL, min max values automatically calculated Defaults NULL palette string, optional: string representing name palette used map colors. Names accessed Matplotlib Colourmaps described https://matplotlib.org/stable/tutorials/colors/colormaps.html. addition, \"ndvi\", \"ndwi\" \"terrain\" palettes available. set None, \"viridis\" used. Defaults NULL","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/map_ee.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualise an Earth Engine Image or Image Collection on an interactive map — map_ee","text":"updated collect_ee() object can passed aggregate_ee() download_ee()","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/map_ee.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise an Earth Engine Image or Image Collection on an interactive map — map_ee","text":"","code":"NULL #> NULL"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/preprocess_ee.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess an Earth Engine Image or Image Collection — preprocess_ee","title":"Preprocess an Earth Engine Image or Image Collection — preprocess_ee","text":"Obtain image stacks Google Earth Engine catalog collection processing. Full support Sentinel-2, Sentinel-3, Landsat 5-9 MODIS satellites. Preprocessing performs server-side filtering, cloud masking, scaling offsetting, calculation spectral indices compositing single image representing, example, median, min, max, mean, quantile standard deviation images. unsupported collections, certain functions like scaling, offsetting, spectral indices cloud/shadow masking may available. Must used object created function, collect_ee()","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/preprocess_ee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess an Earth Engine Image or Image Collection — preprocess_ee","text":"","code":"preprocess_ee(   object,   mask_clouds = TRUE,   reduce = \"median\",   spectral = NULL,   clip = TRUE )"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/preprocess_ee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess an Earth Engine Image or Image Collection — preprocess_ee","text":"object object: data object produced collect_ee() mask_clouds logical, optional: perform cloud shadow masking image(s). Defaults TRUE reduce string, optional: summary technique used reduce image collection single composite. Defaults \"median\" spectral logical, optional: automatically calculate spectral index based Awesome Spectral Indices. required bands available, calculation skipped. Defaults NULL clip logical, optional: clip image (removing surrounding data). mostly affects visualisation - final download always respect bounding box set coords, regardless value. Defaults TRUE","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/preprocess_ee.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess an Earth Engine Image or Image Collection — preprocess_ee","text":"updated collect_ee() object can passed map_ee(), aggregate_ee() download_ee()","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/preprocess_ee.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess an Earth Engine Image or Image Collection — preprocess_ee","text":"","code":"NULL #> NULL  img <- collect_ee(   collection = \"LANDSAT/LC09/C02/T1_L2\",   coords = c(149.769345, -30.335861, 149.949173, -30.206271),   date = \"2021-06-01\",   end_date = \"2022-06-01\" ) #> Error in py_module_import(module, convert = convert): ModuleNotFoundError: No module named 'dateutil'  preprocess_ee(img, spectral = \"NDVI\") #> Error in preprocess_ee(img, spectral = \"NDVI\"): object 'img' not found"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/print.harvester.html","id":null,"dir":"Reference","previous_headings":"","what":"Print harvester objects — print.harvester","title":"Print harvester objects — print.harvester","text":"Print harvester objects","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/print.harvester.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print harvester objects — print.harvester","text":"","code":"# S3 method for harvester print(x, ...)"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/print.harvester.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print harvester objects — print.harvester","text":"x harvester must object class, can created using load_config() ... arguments passed function","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/print.harvester.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print harvester objects — print.harvester","text":"input object","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/update_logtable.html","id":null,"dir":"Reference","previous_headings":"","what":"Update download and processing dataframe — update_logtable","title":"Update download and processing dataframe — update_logtable","text":"Update dataframe table information raster download processing. dataframe simultaneoulsy saved csv file default output directory.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/update_logtable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update download and processing dataframe — update_logtable","text":"","code":"update_logtable(   logname,   file_name,   layer,   source,   settings,   layertitles = list(),   agfunctions = list(),   loginfos = list() )"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/update_logtable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update download and processing dataframe — update_logtable","text":"logname string: name data frame object created init_logfile() file_name string: file name(s) add data frame layer string: layer name(s) add data frame source string: download source, abbreviated. example, \"DEA\" settings object: settings object layertitles string : layer title(s) add data frame, used certain situations e.g. labels summary plots agfunctions aggregation/summary functions used (e.g. mean) specified aggregation requested (e.g. 0-5 m) layer loginfos string: status layer, e.g. \"processed\"","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/update_logtable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update download and processing dataframe — update_logtable","text":"data frame object","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/update_logtable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update download and processing dataframe — update_logtable","text":"","code":"NULL #> NULL"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/validate_py_packages.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if required Python packages for Data-Harvester exist. — validate_py_packages","title":"Check if required Python packages for Data-Harvester exist. — validate_py_packages","text":"Internal function. First, function checks required packages installed. quick check see gdal version 3.4.2. package appears missing reinstalled.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/validate_py_packages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if required Python packages for Data-Harvester exist. — validate_py_packages","text":"","code":"validate_py_packages(env = NULL)"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/validate_py_packages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if required Python packages for Data-Harvester exist. — validate_py_packages","text":"env chr name environment","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/validate_py_packages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if required Python packages for Data-Harvester exist. — validate_py_packages","text":"logical","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/wrap_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap configuration file to data frame — wrap_config","title":"Wrap configuration file to data frame — wrap_config","text":"Wrap configuration file data frame","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/wrap_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap configuration file to data frame — wrap_config","text":"","code":"wrap_config(df, config)"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/wrap_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap configuration file to data frame — wrap_config","text":"df data.frame source data, containing x y variables, usually data frame object config chr name config file","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/wrap_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap configuration file to data frame — wrap_config","text":"list object additional class \"agrefed.wrap\". list stores configuration options source data data harvester.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/write_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Write config to file — write_config","title":"Write config to file — write_config","text":"Write config file","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/write_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write config to file — write_config","text":"","code":"write_config(x, name = NULL, folder = \"../settings/\")"},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/write_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write config to file — write_config","text":"x harvester must object class, can created using load_config() name chr name config file save .yaml format folder chr path config file saved ","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/reference/write_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write config to file — write_config","text":"list; harvester list object additional class \"harvester\". list stores configuration options data harvester.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/news/index.html","id":"dataharvester-001","dir":"Changelog","previous_headings":"","what":"dataharvester 0.0.1","title":"dataharvester 0.0.1","text":"update describe package features one chance report bugs.","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/news/index.html","id":"features-0-0-1","dir":"Changelog","previous_headings":"","what":"Features","title":"dataharvester 0.0.1","text":"initialise_harvester() checks Python depends authentitcates Earth Engine ee_collect() generates object Earth Engine processing downlaods ee_preprocess() perform masking, filtering, spectral index calculations scaling ee_aggregate() basic temporal aggregation images ee_map() visualise Earth Engine images interactive map harvest() perform “headless” data harvesting paired config YAML get_slga() SLGA downloads get_dea() DEA downloads","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/news/index.html","id":"documentation-0-0-1","dir":"Changelog","previous_headings":"","what":"Documentation","title":"dataharvester 0.0.1","text":"initial documentation added functions, draft-y README.md added Initial pkgdown support added, tested yet since repo public","code":""},{"path":"https://sydney-informatics-hub.github.io/dataharvester/news/index.html","id":"dataharvester-0009000","dir":"Changelog","previous_headings":"","what":"dataharvester 0.0.0.9000","title":"dataharvester 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
